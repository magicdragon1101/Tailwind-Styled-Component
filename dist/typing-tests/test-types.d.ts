export declare type IsAny<T, True, False = never> = True | False extends (T extends never ? True : False) ? True : False;
export declare type IsUnknown<T, True, False = never> = unknown extends T ? IsAny<T, False, True> : False;
declare type IsNotAny<T> = IsAny<T, never, any>;
declare type EnsureUnknown<T extends any> = IsUnknown<T, any, never>;
declare type EnsureAny<T extends any> = IsAny<T, any, never>;
export declare function expectType<T>(t: T): T;
export declare function expectExactType<T>(t: T): <U extends IsAny<T, never, IsAny<U, never, [T] extends [U] ? [U] extends [T] ? any : never : never>>>(u: U) => T[];
export declare function expectUnknown<T extends EnsureUnknown<T>>(t: T): T;
export declare function expectExactAny<T extends EnsureAny<T>>(t: T): T;
export declare function expectNotAny<T extends IsNotAny<T>>(t: T): T;
export {};
